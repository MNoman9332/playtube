in default/layout/watch/content
run ajax frontend code for scam and legit

get ajax call from backend to increment scam and legit count

find other places in the script where scam and legit are supposed to appear

replicate everything for vidplay layout

DONATE button on default/layout/watch/content

onclick donate, what should happen


Wo_LikeSystem
PT_Ajax_Requests_File


PT_GetVideoByID in source/watch/content.php
is where eloquent queries are run to get video

getOne is a php database function to get one item in the table
T_VIDEOS is a constant meaning videos..defined in assets/includes/tables.php

click scam
1. script to locate ajax
2. route to ajax file
3. ajax file and database execution
4. return response
4. script to apply response to html

data-likes="{{RAEL_DISLIKES}}" {{ISDISLIKED}}

number3
RegisterPoint in like-system.php was not calculated for scam and legit
located function in functions_one.php

likes_dislikes table..
use type 3 for legit, type 4 for scam
change the scam and legit calculations from the video table

in contents, get all the rael likes and rael dislikes

=====================================================
give points to users in database
let user A transfer points to another user B
let user B get notification of the transfer
let user user A see the transfer in his transactions
let user B see the transfer in his transactions
let user B request withdrawal of points
show transaction in user B and admin 

CRON
when user A sends money to platform(admin)
let user A enter amount to send, and from which address 
ask user A to perform the transaction
let system scan online for the transaction
let system update the transaction table and admin wallet
let admin get notification that user A deposited funds
admin can now 
let user A get notification that deposit is confirmed.


1. Create Address for user A and save to database : https://eu.bsc.chaingateway.io/v1/newAddress

2. Create Address for user B and save to database 
User A wants to donate to user B
3. Get user A balance and save : https://eu.bsc.chaingateway.io/v1/getBinancecoinBalance
4. If sufficient for transfer, Initiate transfer to user B : https://eu.bsc.chaingateway.io/v1/sendBinancecoin
5. Initiate transfer of gas to admin
6. withdrawal

<?php if($pt->settings->crypto_wallet_address) { ?>
    <p>Say hello</p>
<?php  } ?>

When user login, check if user has address
if yes, get balance.. then update balance 


when user clicks get new address,
get address and save to database with balance of 0.

when user A wants to transfer to user B
get user A balance,
if balance is greater than amount, 
send to user B
get user B balance
update user A and user B balance 

when user B wants to withdraw funds
user B enters amount and address
get user B balance
if balance is greater than threshold,
send

notify [type,admin]
update users balance on frontend after withdrawal

if($first == 'token-transfer') {
    $error    = none;
    $user_id  = $user->id;
    $sender_balance  = $user->token_balance;
    $receiver  = PT_UserData($_POST['receiver_id']);
    $video_id = $_POST['video_id'];

    if(empty($_POST['password'])){
        $error = 'Please enter password';
    }
    else if(empty($_POST['amount']) || !is_numeric($_POST['amount'])){
        $error = 'Please enter amount';
    }
    else if($sender_balance < $_POST['amount']){
        $error = 'Insufficient balance';
    }
    else{
        $password        = PT_Secure($_POST['password']);
        $password_hashed = sha1($password);
        $sender = $db->where('id',$user_id)->where('active',1)->where('password',$password_hashed)->getOne(T_USERS);
        if(empty($sender)) {
            $error = 'Your password is wrong';
        }
    }

    if (empty($error)) {
        $receiver_balance = $receiver->token_balance + PT_Secure($_POST['amount']);
        $update_receiver = $db->where('user_id',$receiver->id)->update(T_TOKEN_BAL,array('balance' => $receiver_balance));
        $sender_balance = $user->token_balance - PT_Secure($_POST['amount']);
        $update_sender = $db->where('user_id',$sender->id)->update(T_TOKEN_BAL,array('balance' => $sender_balance));
        $insert_data    = array(
            'reference'   => uniqid("", true),
            'amount'    => PT_Secure($_POST['amount']),
            'sender_id'   => $user_id,
            'receiver_id'   => $receiver->id,
            'video_id'   => $video_id,
            'mode' => 'donation',
            'status' => 1,
            'created_at' => time(),
        );
        $insert  = $db->insert(T_TOKEN_TRANS,$insert_data);
        if (!empty($insert)) {
            $notif_data = array(
                'recipient_id' => 0,
                'type' => 'with',
                'admin' => 1,
                'time' => time()
            );
            
            pt_notify($notif_data);
            $data['status']  = 200;
            $data['message'] = 'Token transfered successfully!';
        }
    }

    else{
        $data['status']  = 400;
        $data['message'] = $error;
    }
}

if ($first == 'token-withdrawal') {
    
    $error    = none;
    $balance  = $user->token_balance;
    $user_id  = $user->id;
    //var_dump($first);
    // Check is unprocessed requests exits 
    $db->where('receiver_id',$user_id);
    $db->where('status',0);
    $db->where('mode','withdrawal');
    $requests = $db->getValue(T_TOKEN_TRANS, 'count(*)');
    
    if (!empty($requests)) {
        $error = $lang->cant_request_withdrawal;
    }
    
    else if ($user->token_balance < $_POST['amount']) {
        $error = $lang->please_check_details;
    }

    else{

        if (empty($_POST['crypto_wallet_address']) ) {
            $error = $lang->please_check_details;
        }

        else if(empty($_POST['amount']) || !is_numeric($_POST['amount'])){
            $error = $lang->please_check_details;
        }

        else if($_POST['amount'] < 50){
            $error = 'Your balance is'.$balance. ', the minimum withdrawal request amount is 50';
        }
    }

    if (empty($error)) {
        $insert_data    = array(
            'reference'   => uniqid("", true),
            'amount'    => PT_Secure($_POST['amount']),
            'sender_id'   => 1,
            'receiver_id'   => $user_id,
            'receiver_address'   => PT_Secure($_POST['crypto_wallet_address']),
            'mode' => 'withdrawal',
            'created_at' => time(),
        );

        $insert  = $db->insert(T_TOKEN_TRANS,$insert_data);
        if (!empty($insert)) {
            $notif_data = array(
                'recipient_id' => 0,
                'type' => 'with',
                'admin' => 1,
                'time' => time()
            );
            
            pt_notify($notif_data);
            $data['status']  = 200;
            $data['message'] = 'Your withdrawal request has been successfully sent!';
        }
    }

    else{
        $data['status']  = 400;
        $data['message'] = $error;
    }
}